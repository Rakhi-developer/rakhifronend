Express.js framework

Express.js is a minimal and flexible Node.js web application framework 
that provides a robust set of features to develop web and mobile applications. 
It is designed to make the process of building web applications with Node.js easier and more straightforward.
Express.js is widely used for building server-side applications and APIs.

Here are some key features and concepts associated with Express.js:

1.Routing: 

Express provides a simple and expressive way to define routes for your application. 
You can handle HTTP methods (GET, POST, PUT, DELETE, etc.) and URL patterns to define how your
application responds to different requests.

Example:

const express = require('express');
const app = express();

app.get('/', (req, res) => {
  res.send('Hello, World!');
});

app.listen(3000, () => {
  console.log('Server is running on port 3000');
});


2.Middleware: 

Middleware functions are functions that have access to the request and response objects 
in the Express application's request-response cycle. They can modify the request and response objects, 
end the request-response cycle, or call the next middleware function in the stack.

Example:

// Middleware function
const logger = (req, res, next) => {
  console.log(`Request received at: ${new Date()}`);
  next();
};

// Using middleware in an Express app
app.use(logger);

3.Template Engines: 
Express allows you to use different template engines to generate HTML dynamically. 
Popular template engines include EJS, Pug, and Handlebars.

Example using EJS:

// Set EJS as the view engine
app.set('view engine', 'ejs');

// Render a view using EJS
app.get('/user/:id', (req, res) => {
  res.render('user', { userId: req.params.id });
});

4.Static Files: 
Express makes it easy to serve static files (like images, stylesheets, and scripts) 
using the express.static middleware.

Example:

// Serve static files from the 'public' directory
app.use(express.static('public'));

5.Error Handling: 

Express provides a way to handle errors using middleware functions. 
You can define error-handling middleware to catch errors and respond accordingly.

Example:

app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).send('Something went wrong!');
});

Express.js Routing in detail:

Defining Routes:

In an Express.js application, routes are defined using the app.METHOD(path, callback)
functions, where METHOD is an HTTP request method (e.g., GET, POST, PUT, DELETE), 
path is a URL path, and callback is a function that gets executed
when the route is matched.

Example:

const express = require('express');
const app = express();

// Define a route for handling GET requests to the root path '/'
app.get('/', (req, res) => {
  res.send('Hello, World!');
});
// Start the server
app.listen(3000, () => {
  console.log('Server is running on port 3000');
});

Dynamic Routes:

Express.js allows you to define dynamic routes using parameters in the route path. 
Parameters are specified with a colon (:) followed by the parameter name.

Example:

// Dynamic route with a parameter ':id'
app.get('/user/:id', (req, res) => {
  const userId = req.params.id;
  res.send(`User ID: ${userId}`);
});

Route Middleware:

Middleware functions can be attached to specific routes to execute code 
before the main route handler. This can be useful for tasks such as authentication, 
logging, or data validation.

Example:

// Middleware function
const authenticationMiddleware = (req, res, next) => {
  // Check if the user is authenticated
  // If authenticated, call next() to proceed to the route handler
  // If not authenticated, send an error response
};

// Use middleware for a specific route
app.get('/profile', authenticationMiddleware, (req, res) => {
  res.send('User profile page');
});

Express Router:
For larger applications, you can organize routes using an Express Router. 
This allows you to modularize your route handlers into separate files or modules.

Example:

// routes.js
const express = require('express');
const router = express.Router();
router.get('/', (req, res) => {
  res.send('Main page');
});

// app.js
const express = require('express');
const app = express();
const routes = require('./routes');

app.use('/', routes);

// Start the server
app.listen(3000, () => {
  console.log('Server is running on port 3000');
});
